>W 7f 7f 01 50 00 81
<R 7f 7f 02 50 01 00 81
>W 7f 7f 01 51 01 81
<R 7f 7f 02 51 05 00 81
>W 7f 7f 01 52 02 00 81
<R 7f 7f 02 52 05 00 97 00 00 00 81
>W 7f 7f 01 53 02 01 81
<R 7f 7f 02 53 05 00 57 00 00 01 81
>W 7f 7f 01 54 02 02 81
<R 7f 7f 02 54 05 00 ff ff ff ff 81
>W 7f 7f 01 55 02 03 81
<R 7f 7f 02 55 05 00 ff ff ff ff 81
>W 7f 7f 01 56 02 04 81
<R 7f 7f 02 56 05 00 5c 00 01 00 81
>W 7f 7f 01 57 02 05 81
<R 7f 7f 02 57 05 00 9b 3a e7 18 81
>W 7f 7f 01 58 02 06 81
<R 7f 7f 02 58 05 00 86 00 01 00 81
>W 7f 7f 01 59 02 07 81
<R 7f 7f 02 59 05 00 f8 0c 48 20 81
>W 7f 7f 01 5a 02 08 81
<R 7f 7f 02 5a 05 00 00 00 00 00 81
                                                    # ==================================================================
                                                    # ExtendedDecoderInfo.\uE000() calls:
                                                    # ==================================================================
                                                    # DetectESUMode
                                                    # ------------------------------------------------------------------
>W 7f 7f 01 5b 00 81                                # Reset()
<R 7f 7f 02 5b 01 00 81
>W 7f 7f 01 5c 10 02 00 20 19 81                    # SendTrackPowerOn(ESUPowerMode(currentLimit=32, voltage=48, bitTime=20, calibrate=-1))
                                                    # -> SendTrackPowerOn(PowerMode(Programming, false, currentLimit=32, voltage=25)
<R 7f 7f 02 5c 05 00 81
>W 7f 7f 01 5d 34 0c 0c 64 64 00 00 81              # DCC(shortPulse=12, longPulse=12, preambleBits=100, stopBits=100, repeatCount=0, extCount=0, data={})
<R 7f 7f 02 5d 05 00 81
>W 7f 7f 01 5e 16 02 81                             # SetSomeMagic1(\uE02B.\uE003.\uE002 = 2)
<R 7f 7f 02 5e 07 00 81
>W 7f 7f 01 5f 34 0c 0c 64 64 64 00 81              # DCC(shortPulse=12, longPulse=12, preambleBits=100, stopBits=100, repeatCount=100, extCount=0, data={})
<R 7f 7f 02 5f 07 00 81
>W 7f 7f 01 60 16 00 81                             # SetSomeMagic1(\uE02B.\uE003.\uE000 = 0)
<R 7f 7f 02 60 07 00 81
>W 7f 7f 01 61 18 05 81                             # Delay(5
<R 7f 7f 02 61 07 00 81
>W 7f 7f 01 62 34 14 14 14 0a 00 00 81              # DCC(shortPulse=esuMode.BitTime(20), longPulse=esuMode.BitTime(20), preambleBits=20, stopBits=10, repeatCount=0, extCount=0, data={})
<R 7f 7f 02 62 07 00 81
>W 7f 7f 01 63 16 02 81                             # SetSomeMagic1(\uE02B.\uE003.\uE000 = 2)
<R 7f 7f 02 63 07 00 81
>W 7f 7f 01 64 34 14 14 14 0a 04 00 81              # DCC(shortPulse=esuMode.BitTime(20), longPulse=esuMode.BitTime(20), preambleBits=20, stopBits=10, repeatCount=4, extCount=0, data={})
<R 7f 7f 02 64 07 00 81
                                                    # -----------------------------------------------------------------------
                                                    # return LokProgrammer2.\uE001(), which seems like a pretty complex thing
                                                    # =======================================================================
>W 7f 7f 01 65 34 64 64 04 02 00 00 81              # SendDcc(shortPulse=100, longPulse=100, preambleBits=4, stopBits=2, repeatCount=0, extCount=0, data={})
<R 7f 7f 02 65 07 00 81
>W 7f 7f 01 66 16 02 81                             # SetSomeMagic1(2)
<R 7f 7f 02 66 07 00 81
>W 7f 7f 01 67 19 10 81                             # SetSomeMagic2(16)
<R 7f 7f 02 67 07 00 81
>W 7f 7f 01 68 16 00 81                             # SetSomeMagic1(0)
<R 7f 7f 02 68 07 00 81
>W 7f 7f 01 69 18 05 81                             # Delay(5)
<R 7f 7f 02 69 07 00 81
>W 7f 7f 01 6a 2a 14 79 00 02 00 02 81              # SendUart(bitTime=20, format={PrecisionMode=false, DataBits=8, Parity=Even, StopBits=2}, data=[00 02 00 02])
                                                    # --------------------------------------------------------------------------------------------------------------------
                                                    # fmt = (fmt.PrecisionMode ? 0x80 : 0x00) | ((fmt.DataBits - 1) << 4) | (fmt.Parity << 2) | (fmt.StopBits - 1))
                                                    # Parity {None=0, Even=2, Odd=3}
<R 7f 7f 02 6a 07 00 81
>W 7f 7f 01 6b 18 01 81                             # Delay(1)
<R 7f 7f 02 6b 07 00 81
>W 7f 7f 01 6c 2b 14 79 05 81                       # ReceiveUart()
<R 7f 7f 02 6c 07 00 00 00 97 00 00 00 97 81        # InfoType.ManId -> ESU(151)
>W 7f 7f 01 6d 34 64 64 04 02 00 00 81              # SendDcc(shortPulse=100, longPulse=100, preambleBits=4, stopBits=2, repeatCount=0, extCount=0, data={})
<R 7f 7f 02 6d 07 00 81
>W 7f 7f 01 6e 16 02 81                             # SetSomeMagic1(2)
<R 7f 7f 02 6e 07 00 81
>W 7f 7f 01 6f 19 0e 81                             # SetSomeMagic2(14)
<R 7f 7f 02 6f 07 00 81
>W 7f 7f 01 70 16 00 81                             # SetSomeMagic1(0)
<R 7f 7f 02 70 07 00 81
>W 7f 7f 01 71 18 05 81                             # Delay(5)
<R 7f 7f 02 71 07 00 81
>W 7f 7f 01 72 2a 14 79 00 02 00 02 81              # SendUart(GetDecoderInfo(InfoType.ManId)) =========================
<R 7f 7f 02 72 07 00 81
>W 7f 7f 01 73 18 01 81                             # Delay(1)
<R 7f 7f 02 73 07 00 81
>W 7f 7f 01 74 2b 14 79 05 81                       # ReceiveUart()
<R 7f 7f 02 74 07 00 00 00 97 00 00 00 97 81
>W 7f 7f 01 75 34 64 64 04 02 00 00 81              # SendDcc(shortPulse=100, longPulse=100, preambleBits=4, stopBits=2, repeatCount=0, extCount=0, data={})
<R 7f 7f 02 75 07 00 81
>W 7f 7f 01 76 16 02 81                             # SetSomeMagic1(2)
<R 7f 7f 02 76 07 00 81
>W 7f 7f 01 77 19 12 81                             # SetSomeMagic2(18)
<R 7f 7f 02 77 07 00 81
>W 7f 7f 01 78 16 00 81                             # SetSomeMagic1(0)
<R 7f 7f 02 78 07 00 81
>W 7f 7f 01 79 18 05 81                             # Delay(5)
<R 7f 7f 02 79 07 00 81
>W 7f 7f 01 7a 2a 14 79 00 02 00 02 81              # SendUart(GetDecoderInfo(InfoType.ManId)) =========================
<R 7f 7f 02 7a 07 00 81
>W 7f 7f 01 7b 18 01 81
<R 7f 7f 02 7b 07 00 81
>W 7f 7f 01 7c 2b 14 79 05 81
<R 7f 7f 02 7c 07 00 00 00 97 00 00 00 97 81
>W 7f 7f 01 7d 2a 14 79 01 02 00 03 81              # GetDecoderInfo(InfoType.ManId) ===================================
<R 7f 7f 02 7d 07 00 81
>W 7f 7f 01 7e 18 01 81
<R 7f 7f 02 7e 07 00 81
>W 7f 7f 01 00 2b 14 79 c8 81
<R 7f 7f 02 00 07 00 01 00 97 00 00 00 96 81
>W 7f 7f 01 01 2a 14 79 02 02 01 01 81              # GetDecoderInfo(InfoType.ProductId) ===============================
<R 7f 7f 02 01 07 00 81
>W 7f 7f 01 02 18 01 81
<R 7f 7f 02 02 07 00 81
>W 7f 7f 01 03 2b 14 79 c8 81
<R 7f 7f 02 03 07 00 02 00 9b 00 00 02 9b 81
>W 7f 7f 01 04 2a 14 79 03 02 02 03 81              # GetDecoderInfo(InfoType.SerialNumber) ============================
<R 7f 7f 02 04 07 00 81
>W 7f 7f 01 05 18 01 81
<R 7f 7f 02 05 07 00 81
>W 7f 7f 01 06 2b 14 79 c8 81
<R 7f 7f 02 06 07 00 03 00 8a 97 f2 f9 15 81
>W 7f 7f 01 07 2a 14 79 04 02 03 05 81              # GetDecoderInfo(InfoType.ProdDate) ================================
<R 7f 7f 02 07 07 00 81
>W 7f 7f 01 08 18 01 81
<R 7f 7f 02 08 07 00 81
>W 7f 7f 01 09 2b 14 79 c8 81
<R 7f 7f 02 09 07 00 04 00 96 d7 84 29 e8 81
>W 7f 7f 01 0a 2a 14 79 05 02 04 03 81              # GetDecoderInfo(InfoType.ProdInfo) ================================
<R 7f 7f 02 0a 07 00 81
>W 7f 7f 01 0b 18 01 81
<R 7f 7f 02 0b 07 00 81
>W 7f 7f 01 0c 2b 14 79 c8 81
<R 7f 7f 02 0c 07 00 05 00 ff ff ff ff 05 81
>W 7f 7f 01 0d 2a 14 79 06 02 05 01 81              # GetDecoderInfo(InfoType.BootDate) ================================
<R 7f 7f 02 0d 07 00 81
>W 7f 7f 01 0e 18 01 81
<R 7f 7f 02 0e 07 00 81
>W 7f 7f 01 0f 2b 14 79 c8 81
<R 7f 7f 02 0f 07 00 06 00 0a 00 00 05 09 81
>W 7f 7f 01 10 2a 14 79 07 02 06 03 81              # GetDecoderInfo(InfoType.BootInfo) ================================
<R 7f 7f 02 10 07 00 81
>W 7f 7f 01 11 18 01 81
<R 7f 7f 02 11 07 00 81
>W 7f 7f 01 12 2b 14 79 c8 81
<R 7f 7f 02 12 07 00 07 00 7e c4 8a 23 14 81
>W 7f 7f 01 13 2a 14 79 08 02 07 0d 81              # GetDecoderInfo(InfoType.ApplCode) ================================
<R 7f 7f 02 13 07 00 81
>W 7f 7f 01 14 18 01 81
<R 7f 7f 02 14 07 00 81
>W 7f 7f 01 15 2b 14 79 c8 81
<R 7f 7f 02 15 07 00 08 00 90 00 06 05 9b 81
>W 7f 7f 01 16 2a 14 79 09 02 08 03 81              # GetDecoderInfo(InfoType.ApplData) ================================
<R 7f 7f 02 16 07 00 81
>W 7f 7f 01 17 18 01 81
<R 7f 7f 02 17 07 00 81
>W 7f 7f 01 18 2b 14 79 c8 81
<R 7f 7f 02 18 07 00 09 00 59 25 ba 29 e6 81
>W 7f 7f 01 19 2a 14 79 0a 02 09 01 81              # GetDecoderInfo(InfoType.ApplType) ================================
<R 7f 7f 02 19 07 00 81
>W 7f 7f 01 1a 18 01 81
<R 7f 7f 02 1a 07 00 81
>W 7f 7f 01 1b 2b 14 79 c8 81
<R 7f 7f 02 1b 07 00 0a 00 3f 00 00 00 35 81
>W 7f 7f 01 1c 2a 14 79 01 08 09 81                 # GetSerialFlashInfo: ESU.Decoder.SerialFlashInfo ==================
<R 7f 7f 02 1c 07 00 81
>W 7f 7f 01 1d 18 4b 81
<R 7f 7f 02 1d 07 00 81
>W 7f 7f 01 1e 2b 14 79 c8 81
<R 7f 7f 02 1e 07 00 01 00 ef 40 18 b6 81
>W 7f 7f 01 1f 10 00 00 00 00 81
<R 7f 7f 02 1f 05 00 81
